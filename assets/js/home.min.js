/*! JS group for layout Home or Post Chirpy v2.3 https://github.com/cotes2020/jekyll-theme-chirpy © 2020 Cotes Chung MIT License */ /*! Aggregation of common JS. Chirpy@2.3 https://github.com/cotes2020/jekyll-theme-chirpy © 2020 Cotes Chung MIT License */ /* Reference: https://bootsnipp.com/snippets/featured/link-to-top-page */ $(window).scroll(function() { if ($(this).scrollTop() > 50 && $("#sidebar-trigger").css("display") === "none") { $("#back-to-top").fadeIn(); } else { $("#back-to-top").fadeOut(); } }); $(function() { $("#back-to-top").click(function() { $("body,html").animate({scrollTop: 0}, 800); return false; }); }); $(function(){var k=$("#sidebar-trigger"),h=$("#search-trigger"),c=$("#search-cancel"),d=$("#search-cleaner"),l=$("#main"),m=$("#topbar-title"),g=$("#search-wrapper"),n=$("#search-result-wrapper"),p=$("#search-results"),b=$("#search-input"),e=$("#search-hints"),q=function(){var a=0;return{block:function(){a=$(window).scrollTop()},release:function(){$("html,body").scrollTop(a)},getOffset:function(){return a}}}(),r=function(){return{on:function(){k.addClass("unloaded");m.addClass("unloaded");h.addClass("unloaded"); g.addClass("d-flex");c.addClass("loaded")},off:function(){c.removeClass("loaded");g.removeClass("d-flex");k.removeClass("unloaded");m.removeClass("unloaded");h.removeClass("unloaded")}}}(),f=function(){var a=!1;return{on:function(){a||(n.removeClass("unloaded"),l.addClass("hidden"),a=!0,q.block())},off:function(){a&&(p.empty(),e.hasClass("unloaded")&&e.removeClass("unloaded"),n.addClass("unloaded"),d.removeClass("visable"),l.removeClass("hidden"),b.val(""),a=!1,q.release())},isVisable:function(){return a}}}(); h.click(function(){r.on();f.on();b.focus()});c.click(function(){r.off();f.off()});b.focus(function(){g.addClass("input-focus")});b.focusout(function(){g.removeClass("input-focus")});b.on("keyup",function(a){8===a.keyCode&&""===b.val()?c.hasClass("loaded")?e.removeClass("unloaded"):f.off():""!==b.val()&&(f.on(),d.hasClass("visible")||d.addClass("visable"),c.hasClass("loaded")&&e.addClass("unloaded"))});d.on("click",function(){b.val("");c.hasClass("loaded")?(e.removeClass("unloaded"),p.empty()):f.off(); b.focus();d.removeClass("visable")})}); /** * Expand or close the sidebar in mobile screens. * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2018-2019 Cotes Chung * MIT License */ $(function() { var sidebarUtil = (function() { const ATTR_DISPLAY = "sidebar-display"; var isExpanded = false; var body = $("body"); return { toggle() { if (isExpanded === false) { body.attr(ATTR_DISPLAY, ""); } else { body.removeAttr(ATTR_DISPLAY); } isExpanded = !isExpanded; } }; }()); $("#sidebar-trigger").click(sidebarUtil.toggle); $("#mask").click(sidebarUtil.toggle); }); /* * Hide Header on scroll down * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2018-2019 Cotes Chung * MIT License */ $(function() { var didScroll; var lastScrollTop = 0; var delta = 5; var topbarHeight = $("#topbar-wrapper").outerHeight(); function hasScrolled() { var st = $(this).scrollTop(); /* Make sure they scroll more than delta */ if (Math.abs(lastScrollTop - st) <= delta) { return; } if (st > lastScrollTop && st > topbarHeight) { /* Scroll Down */ $("#topbar-wrapper").removeClass("topbar-down").addClass("topbar-up"); if ($("#toc-wrapper").length > 0) { $("#toc-wrapper").removeClass("topbar-down"); } if ($(".access").length > 0) { $(".access").removeClass("topbar-down"); } if ($("#search-input").is(":focus")) { $("#search-input").blur(); /* remove focus */ } } else { /* Scroll Up */ if (st + $(window).height() < $(document).height()) { $("#topbar-wrapper").removeClass("topbar-up").addClass("topbar-down"); if ($("#toc-wrapper").length > 0) { $("#toc-wrapper").addClass("topbar-down"); } if ($(".access").length > 0) { $(".access").addClass("topbar-down"); } } } lastScrollTop = st; } $(window).scroll(function(event) { if ($("#topbar-title").is(":hidden")) { /* Not in small screens */ didScroll = true; } }); setInterval(function() { if (didScroll) { hasScrolled(); didScroll = false; } }, 250); }); /* * Topbar title auto change while scrolling in mobile screens. * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2018-2019 Cotes Chung * MIT License */ $(function() { var DEFAULT = $("#topbar-title").text().trim(); var title = ($("div.post>h1").length > 0) ? $("div.post>h1").text().trim() : $("h1").text().trim(); if ($("#page-category").length || $("#page-tag").length) { /* The title in Category or Tag page will be "<title> <count_of_posts>" */ if (/\s/.test(title)) { title = title.replace(/[0-9]/g, "").trim(); } } /* Replace topbar title while scroll screens. */ $(window).scroll(function () { if ($("#post-list").length /* in Home page */ || $("div.post>h1").is(":hidden") /* is tab pages */ || $("#topbar-title").is(":hidden") /* not mobile screens */ || $("#sidebar.sidebar-expand").length) { /* when the sidebar trigger is clicked */ return false; } if ($(this).scrollTop() >= 95) { if ($("#topbar-title").text() !== title) { $("#topbar-title").text(title); } } else { if ($("#topbar-title").text() !== DEFAULT) { $("#topbar-title").text(DEFAULT); } } }); /* Click title remove hover effect. */ $("#topbar-title").click(function() { $("body,html").animate({scrollTop: 0}, 800); }); }); /* * Copy current page url to clipboard. * v2.1 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2020 Cotes Chung * MIT License */ function copyLink(url) { if (!url || 0 === url.length) { return; } url = window.location.href; var $temp = $("<input>"); $("body").append($temp); $temp.val(url).select(); document.execCommand("copy"); $temp.remove(); alert("Link copied successfully!"); } /** * Initial Bootstrap Tooltip. * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2019 Cotes Chung * MIT License */ $(function () { $("[data-toggle=\"tooltip\"]").tooltip(); }); /* * Caculate the Timeago * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2019 Cotes Chung * MIT Licensed */ $(function() { var toRefresh = $(".timeago").length; var intervalId = void 0; function timeago(iso, isLastmod) { let now = new Date(); let past = new Date(iso); if (past.getFullYear() !== now.getFullYear()) { toRefresh -= 1; return past.toLocaleString("en-US", { year: "numeric", month: "short", day: "numeric" }); } if (past.getMonth() !== now.getMonth()) { toRefresh -= 1; return past.toLocaleString("en-US", { month: "short", day: "numeric" }); } let seconds = Math.floor((now - past) / 1000); let day = Math.floor(seconds / 86400); if (day >= 1) { toRefresh -= 1; return day + " day" + (day > 1 ? "s" : "") + " ago"; } let hour = Math.floor(seconds / 3600); if (hour >= 1) { return hour + " hour" + (hour > 1 ? "s" : "") + " ago"; } let minute = Math.floor(seconds / 60); if (minute >= 1) { return minute + " minute" + (minute > 1 ? "s" : "") + " ago"; } return (isLastmod ? "just" : "Just") + " now"; } function updateTimeago() { $(".timeago").each(function() { if ($(this).children("i").length > 0) { var basic = $(this).text(); var isLastmod = $(this).hasClass("lastmod"); var node = $(this).children("i"); var date = node.text(); /* ISO Date: "YYYY-MM-DDTHH:MM:SSZ" */ $(this).text(timeago(date, isLastmod)); $(this).append(node); } }); if (toRefresh === 0 && typeof intervalId !== "undefined") { clearInterval(intervalId); /* stop interval */ } return toRefresh; } if (toRefresh === 0) { return; } if (updateTimeago() > 0) { /* run immediately */ intervalId = setInterval(updateTimeago, 60000); /* run every minute */ } });
